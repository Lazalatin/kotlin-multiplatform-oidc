import org.publicvalue.multiplatform.oauth.data.types.CodeChallengeMethod;
import kotlin.Boolean;

CREATE TABLE IF NOT EXISTS `client` (
    `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    `idpId` Integer NOT NULL,
    `name` TEXT NOT NULL,
    `client_id` TEXT,
    `client_secret` Text,
    `scope` TEXT,
    `prompt` TEXT,
    `login_hint` TEXT,
    `domain_hint` TEXT,
    `code_challenge_method` TEXT AS CodeChallengeMethod NOT NULL,
    `use_webflow_logout` INTEGER AS Boolean NOT NULL DEFAULT FALSE
);


-- queries


insert:
INSERT INTO client(
    `id`,
    `idpId`,
    `name`,
    `client_id`,
    `client_secret`,
    `scope`,
    `prompt`,
    `login_hint`,
    `domain_hint`,
    `code_challenge_method`,
    `use_webflow_logout`
) VALUES (
    nullif(:id, 0),
    :idpId,
    :name,
    :client_id,
    :client_secret,
    :scope,
    :prompt,
    :login_hint,
    :domain_hint,
    :code_challenge_method,
    :use_webflow_logout
);

getAll:
SELECT
    `id`,
    `idpId`,
    `name`,
    `client_id`,
    `client_secret`,
    `scope`,
    `prompt`,
    `login_hint`,
    `domain_hint`,
    `code_challenge_method`,
    `use_webflow_logout`
FROM client
WHERE idpId = :idpId;

get:
SELECT
    `id`,
    `idpId`,
    `name`,
    `client_id`,
    `client_secret`,
    `scope`,
    `prompt`,
    `login_hint`,
    `domain_hint`,
    `code_challenge_method`,
    `use_webflow_logout`
FROM client
WHERE id = :id;

update:
UPDATE client SET
    `id` = :id,
    `idpId` = :idpId,
    `name` = :name,
    `client_id` = :client_id,
    `client_secret` = :client_secret,
    `scope` = :scope,
    `prompt` = :prompt,
    `login_hint` = :login_hint,
    `domain_hint` = :domain_hint,
    `code_challenge_method` = :code_challenge_method,
    `use_webflow_logout` = :use_webflow_logout
WHERE id = :id;

delete:
DELETE FROM client WHERE id = :id;

deleteAll:
DELETE FROM client;

lastInsertRowId:
SELECT last_insert_rowid();